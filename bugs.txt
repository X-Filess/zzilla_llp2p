/* 2013.09.06 */
1. peer::data_close()竟然會在map_fd_pid找不到該socket對應的pid,代表整個系統的table維護有問題
2. 懷疑在peer::data_close()有可能刪除到不該刪除的table,導致產生"The descriptor is not a socket"這個錯誤訊息

/* 2013.09.10 */
1. source delay的計算在經過22'32"後會出現問題(過那時間之後計算出來的source delay都一樣)
2. buf_chunk_t指向chunk_ptr,如果chunk_ptr被delete後會不會有問題(buf_chunk_t指向NULL)?

/* 2013.10.24 */
1. peer.cpp(1274)會發生segmentation fault，原因可能是map_in_pid_fd在1236行已事先被清除

/* 2013.11.21 */
1. 定期10分鐘重連PK的版本中，peer可能會收到兩次CHNK_CMD_PEER_REG，第二次的訊息完全錯誤，可能是PK有資料沒清乾淨

/* 2013.11.26 */
1. 有時候如果網路不穩導致peer有幾秒鐘時間沒收到

/* 2013.11.27 */
1. Client程式有問題而pause的話，先讓他與其他人的連線(包括PK)中斷 (PK timeout的情況)
2. Segmentation fault 256 Expression:map/set iterator not incrementable

/* 2013.12.22 */
發現2013.10.24的segmentation fault原因，並修正完畢(原因是pid誤打成cfd。所以其實每次判斷上都錯誤，發生segmen fault的情況則剛好是pid=cfd的時候)

/* 2013.12.26 */
ratio(localBitrate/sourceBitrate)會發生分母是0的情形

/* 2014.01.08 */
logger_client裡的log_buffer, pop出來後沒有free?

/* 2014.01.20 */
1. FireBreath自身include的header檔要最優先放，不然m_host->getDOMWindow()的時候會發生"Pure virtual function call"的runtime error
2. plugin的thread改成plugin回傳一個unique的key作為map的key，不再以channel_id作為map的key

/* 2014.02.14 */
1. 改變source-delay的計算方式:
		origin: 在testing狀態時是以test-peer來的封包計算source-delay，而不計算PK下來的
		modify: 只要收到新的封包(過濾後)就會計算source-delay

/* 2014.02.21 */
1. 送log訊息改成一個p2p chunk只包一個log command

/* 2014.02.23 */
1. my_public_ip沒有設定
2. 收到pk的REGISTER後再開始送第一筆message給log-server
3. log data裡的log header內容不重要

/* 2014.03.05 */
1. 太多次的WSACleanup()會造成socket error, 錯誤碼是10093

/* 2014.03.21 */
1. 手動關閉parent-peer時, child-peer沒有送topology給log server
2. netword.cpp:217 收到list名單後，正在連向那些list名單時被pk踢掉，造成connect error
3. leastCurrDiff < 0 的問題已解決

/* 2014.08.07 */
1. VS2013編譯的執行檔預設不支援XP，需要調一些設定:
	(1) 專案->屬性->一般->平台工具組，改成"Visual Studio 2013 - Windows XP (v120_xp)"
	(2) 專案->屬性->連結器->系統->子系統，改成"主控台 (/SUBSYSTEM:CONSOLE)"
2. 靜態連結MSVC120.dll檔方法:
	專案->屬性->C/C++->程式碼產生->執行階段程式庫，改成"多執行緒 (/MT)"
3. Socket 由 start session 呼叫後建立，並且由 stop session 呼叫後關閉
4. 一個 peer 的一個 substream 就是一個新 socket，換句話說，兩個 peer 之間可能存在4條socket

/* 2014.08.18 */
1. Notepad++ 搜尋目標做為參數，Example:
	Search: ([0-9]+)\.([0-9]+)，參數一: \1，參數二: \2
2. Excel數據整理(1): 合併有相同欄位值的列的方式 -> 小計

/* 2014.08.20 */
1. WSAStartUp 和 WSACleanUp 必須成雙成對，否則 FireBreath 會因此掛掉

/* 2014.11.03 */
:1,$s/\s\+/\t/g  全部空白取代成\t

/* 2014.11.12 */
Windows防火牆不會擋連外的連線

/* 2014.11.24 */
OBS 的 FPS 會影響 RTMP 封包大小的變動率，FPS越高，變動率越小
	
/* 2014.12.07 */
UDT 的 epoll_waiter 太耗時，導致 pkt_rate 最好不要超過60
會有 substream 卡在 CONNECTING 狀態

/* 2014.12.21 */
UDT 在 CONNECTING 狀態下被刪除時會當掉，WHY? (已找出原因: 非阻塞模式下 connecting 時間不能超過 3 秒，否則一定當，應該是 UDT bug 之一)

/* 2014.01.09 */
UDT Header: 44 bytes
Type: Control/Data
	Control:	0 (handshake)
				1 (keepalive)
				2 (ack)
				3 (nak`)
				5 (shutdown)
				6 (ack2)
																1 (Keepalive)
																				1 (Keepalive)
	Type: 	0 (Handshake)
			1 (Keepalive)	
			
/* 2015.01.11 */
/MTd模式下，在專案->屬性->C/C++->前置處理器->前置處理器定義 加入 "_SCL_SECURE_NO_WARNINGS" 解決一個C4996問題

/* 2015.01.25 */
peer::1405 bug

/* 2015.02.02 */
(已解決)UDT::TRACEINFO trace 在 socket 剛建好的時候不能呼叫 perfmon(), 否則會 crash, 應該是 UDT 的 bug(可能有些 structure 還沒建好)

/* 2015.02.03 */
UDT struct CPerfMon 需要對成員做補齊動作

/* 2015.02.27 */
當沒收完全 expected len 長度的封包時，recv_packet_state 會由 READ_HEADER_RUNNING 狀態離開，下次再從 READ_HEADER_RUNNING 狀態繼續收；但有時候會變成從 recv_packet_state == 0 的狀態進來，造成收封包實錯誤

/* 2015.03.01 */
雖然有限定連線時間不超過3秒，但仍然發生"2014.12.21"遇到的問題
解決方式: 參考http://www.paobuke.com/develop/pbk1393.html。單元測試OK